import{i as w,h as y,y as I,a as V,e as v,d as H,b as o,c,s as T,f as n,g,j as q}from"./index-8edf265f.js";import"./Container-f2d36f2f.js";import"./BufferPool-befa182b.js";import"./color-430dd9e0.js";import"./WGLContainer-35b97840.js";import"./enums-bdecffa2.js";import"./Texture-f675116c.js";import"./ProgramTemplate-ade57408.js";import"./definitions-d28bab5c.js";import"./GeometryUtils-f6e6151e.js";import"./FramebufferObject-d5b7affd.js";import"./StyleDefinition-29c49b98.js";import"./enums-fb086c25.js";import"./MagnifierPrograms-2c5185f8.js";import"./OrderIndependentTransparency-6ae10952.js";import"./floatRGBA-adf8f6af.js";import"./testSVGPremultipliedAlpha-9055109d.js";import{r as U}from"./GraphicsView2D-9be86d91.js";import"./AttributeStoreView-302aad8c.js";import"./earcut-fb2d01fb.js";import"./featureConversionUtils-bfaae0f6.js";import"./vec3f32-2da9db36.js";import{r as S,o as f,n as d}from"./imageUtils-fc786669.js";import{m as b,u as C}from"./LayerView-afeaadc7.js";import{a as Q}from"./HighlightGraphicContainer-f1965438.js";import{a as $}from"./RefreshableLayerView-e734be59.js";import{S as P,G as k,r as F}from"./drapedUtils-4efd95b2.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./heatmapUtils-485005f9.js";import"./vec4f64-3c9d0901.js";import"./config-1337d16e.js";import"./OptimizedGeometry-d94e541f.js";import"./ExpandedCIM-cc180b11.js";import"./BidiEngine-9a40f2f4.js";import"./visualVariablesUtils-73d1d4d8.js";import"./GeometryUtils-984e8446.js";import"./utils-55c191c7.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-4acc4a23.js";import"./rasterizingUtils-f8b3e6ff.js";import"./pbf-08dd563b.js";import"./imageutils-e6922af3.js";import"./Matcher-1fcb2229.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-8e67d24e.js";import"./defaultsJSON-b087dd4d.js";import"./LRUCache-c7a923e7.js";import"./CircularArray-ef508845.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-a7df6cd1.js";import"./FieldsIndex-3d8128c0.js";import"./UnknownTimeZone-d5028e24.js";import"./TimeOnly-f35243a6.js";import"./diffUtils-9dbdd340.js";import"./basicInterfaces-11f56cb3.js";import"./normalizeUtilsSync-62ac54ad.js";import"./projectionSupport-131d63cd.js";import"./json-48e3ea08.js";import"./LabelClass-67c7130a.js";import"./labelUtils-39618ac3.js";import"./jsonUtils-805d1979.js";import"./TiledDisplayObject-d74621e4.js";import"./labelingInfo-8214bb11.js";import"./clusterUtils-6b9076e5.js";import"./MD5-715f37cd.js";import"./SizeVariable-0dc1bc42.js";import"./colorRamps-763955b0.js";import"./LegendOptions-48c2523d.js";import"./util-a284bd77.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BitmapTileContainer-ec88b95a.js";import"./Bitmap-a468b1d0.js";import"./TileContainer-d3fa1aca.js";import"./scaleUtils-9954959a.js";import"./BaseGraphicContainer-ea792e77.js";import"./FeatureContainer-ac3e4d66.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-44a79dda.js";import"./popupUtils-158a08e7.js";const G=[0,0];let a=class extends $(S(b(C))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var i;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(i=this._highlightView)==null||i.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,i=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,i==null?void 0:i.effectiveMinLOD,i==null?void 0:i.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,r)=>this.fetchTile(e,r)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),P(this,this.layer)){const e=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new Q(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new k({createFetchPopupFeaturesQueryGeometry:(r,h)=>F(r,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,h)=>{e.graphicUpdateHandler({graphic:r,property:h})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,i;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(i=this._highlightView)==null||i.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,i):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):v()}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var i;return H((i=this.layer.tileInfo)==null?void 0:i.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(G,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,i={}){const e=this.tilemapCache,{signal:r,resamplingLevel:h=0}=i;if(!e)try{return await this._fetchImage(t,r)}catch(s){if(!o(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(h<3){const m=this._tileInfoView.getTileParentId(t.id);if(m){const u=new c(m),_=await this.fetchTile(u,{...i,resamplingLevel:h+1});return d(this._tileInfoView,_,u,t)}}throw s}const p=new c(0,0,0,0);let l;try{if(await e.fetchAvailabilityUpsample(t.level,t.row,t.col,p,{signal:r}),p.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);l=await this._fetchImage(p,r)}catch(s){if(o(s))throw s;l=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,l,p,t):l}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(i){o(i)||T.getLogger(this).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};n([g()],a.prototype,"resampling",null),n([g()],a.prototype,"tilemapCache",null),a=n([q("esri.views.2d.layers.TileLayerView2D")],a);const li=a;export{li as default};
