import{dl as _,dm as S,a$ as T,aS as v,I as b,N as u,dT as w,dI as $,F as h,E as O,bb as R,cU as U,dU as W,f as o,g as a,aV as j,aR as I,dV as P,j as L,dt as N}from"./index-8edf265f.js";import{m as A}from"./MultiOriginJSONSupport-2c2935ac.js";import{i as B}from"./APIKeyMixin-828ee2ca.js";import{p as M}from"./ArcGISCachedService-9f6bcee9.js";import{E as C,f as k,X as D}from"./SublayersOwner-01b43c83.js";import{l as J}from"./ArcGISService-16130ddc.js";import{o as V}from"./CustomParametersMixin-6ff009ea.js";import{u as q}from"./OperationalLayer-1bd8068d.js";import{j as E}from"./PortalLayer-394f0be4.js";import{f as G}from"./RefreshableLayer-1604ee0a.js";import{d as x}from"./commonProperties-43b199c9.js";import{o as y}from"./imageBitmapUtils-ed29b33e.js";import"./TileInfoTilemapCache-eafc07df.js";import"./TilemapCache-92136343.js";import"./ByteSizeUnit-d4757d40.js";import"./LRUCache-c7a923e7.js";import"./DictionaryLoader-7ed264e8.js";import"./FieldsIndex-3d8128c0.js";import"./UnknownTimeZone-d5028e24.js";import"./portalItemUtils-1acb3c0b.js";import"./UniqueValueRenderer-36595a45.js";import"./LegendOptions-48c2523d.js";import"./diffUtils-9dbdd340.js";import"./SizeVariable-0dc1bc42.js";import"./colorRamps-763955b0.js";import"./ColorStop-7842c5e0.js";import"./jsonUtils-805d1979.js";import"./styleUtils-e8aad1b5.js";import"./jsonUtils-f9aedde2.js";import"./heatmapUtils-485005f9.js";import"./vec4f64-3c9d0901.js";import"./QueryTask-92b896f2.js";import"./Query-474f3baf.js";import"./Field-ebbe1dfc.js";import"./fieldType-088ee331.js";import"./executeForIds-ee169be0.js";import"./query-22d59433.js";import"./pbfQueryUtils-3b107514.js";import"./pbf-08dd563b.js";import"./OptimizedGeometry-d94e541f.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-b4140d92.js";import"./executeQueryJSON-bdb53db6.js";import"./FeatureSet-4ba9f962.js";import"./executeQueryPBF-b4c7e501.js";import"./featureConversionUtils-bfaae0f6.js";import"./FeatureType-d929c2b3.js";import"./FeatureTemplate-580a397d.js";import"./LabelClass-67c7130a.js";import"./labelUtils-39618ac3.js";import"./defaultsJSON-b087dd4d.js";import"./labelingInfo-8214bb11.js";import"./LayerFloorInfo-0e67daa6.js";import"./serviceCapabilitiesUtils-7d3bbd37.js";import"./AttachmentQuery-6e51685e.js";import"./popupUtils-afaed8cf.js";import"./sublayerUtils-44a79dda.js";var d;const f=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let i=d=class extends _(S(C(M(k(q(E(J(A(G(B(V(N)))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(T).then(()=>this._fetchService(r))),Promise.resolve(this)}get attributionDataUrl(){var r;const e=(r=this.parsedUrl)==null?void 0:r.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){var t;return(e=e||((t=r.tileInfo)==null?void 0:t.spatialReference))&&v.fromJSON(e)}writeSublayers(e,r,t,s){if(!this.loaded||!e)return;const p=e.slice().reverse().flatten(({sublayers:l})=>l&&l.toArray().reverse()).toArray(),n=[],c={writeSublayerStructure:!1,...s};p.forEach(l=>{const m=l.write({},c);n.push(m)}),n.some(l=>Object.keys(l).length>1)&&(r.layers=n)}get tileServers(){var e;return this._getDefaultTileServers((e=this.parsedUrl)==null?void 0:e.path)}castTileServers(e){return Array.isArray(e)?e.map(r=>b(r).path):null}fetchTile(e,r,t,s={}){const{signal:p}=s,n=this.getTileUrl(e,r,t),c={responseType:"image",signal:p,query:{...this.refreshParameters}};return u(n,c).then(l=>l.data)}async fetchImageBitmapTile(e,r,t,s={}){const{signal:p}=s;if(this.fetchTile!==d.prototype.fetchTile){const m=await this.fetchTile(e,r,t,s);return y(m,e,r,t,p)}const n=this.getTileUrl(e,r,t),c={responseType:"blob",signal:p,query:{...this.refreshParameters}},{data:l}=await u(n,c);return y(l,e,r,t,p)}getTileUrl(e,r,t){var c,l;const s=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,p=w({...(c=this.parsedUrl)==null?void 0:c.query,blankTile:!s&&null,...this.customParameters,token:this.apiKey}),n=this.tileServers;return`${n&&n.length?n[r%n.length]:(l=this.parsedUrl)==null?void 0:l.path}/tile/${e}/${r}/${t}${p?"?"+p:""}`}loadAll(){return $(this,e=>{e(this.allSublayers)})}_fetchService(e){return new Promise((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new h("tile-layer:undefined-url","layer's url is not defined");const s=O(this.parsedUrl.path);if(s!=null&&s.serverType==="ImageServer")throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");u(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)}).then(r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!R(t))return this._fetchServerVersion(t,e).then(s=>{this.read({currentVersion:s})}).catch(()=>{})})}_fetchServerVersion(e,r){if(!U(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return u(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then(s=>{if(s.data&&s.data.currentVersion)return s.data.currentVersion;throw new h("tile-layer:version-not-available")})}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,s=f.length;t<s;t++)if(r=f[t],r.toLowerCase().includes(e))return W("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[g]}};o([a({readOnly:!0})],i.prototype,"attributionDataUrl",null),o([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),o([a({json:{read:!0,write:!0}})],i.prototype,"blendMode",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([a({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([a({type:Boolean})],i.prototype,"resampling",void 0),o([a()],i.prototype,"sourceJSON",void 0),o([a({type:v})],i.prototype,"spatialReference",void 0),o([j("spatialReference",["spatialReference","tileInfo"])],i.prototype,"readSpatialReference",null),o([a({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),o([a({readOnly:!0})],i.prototype,"sublayers",void 0),o([I("sublayers",{layers:{type:[D]}})],i.prototype,"writeSublayers",null),o([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([a()],i.prototype,"tileServers",null),o([P("tileServers")],i.prototype,"castTileServers",null),o([a({readOnly:!0,json:{read:!1}})],i.prototype,"type",void 0),o([a(x)],i.prototype,"url",void 0),i=d=o([L("esri.layers.TileLayer")],i);const g=Symbol("default-fetch-tile");i.prototype.fetchTile[g]=!0;const He=i;export{He as default};
