import{V as l,w as u,P as _,n as p,e as c,k as g,f as n,g as d,j as w}from"./index-17f5801a.js";import{m as y,c as f,C as k,T as M,j as V,S as v,O as G}from"./Stop-4ba4f4b7.js";import{m as I,u as F}from"./LayerView-ec2c2565.js";import{i as H}from"./GraphicContainer-a8fa3b1b.js";import{r as C}from"./GraphicsView2D-13bcd2b8.js";import"./scaleUtils-f904dc53.js";import"./Container-7d5626df.js";import"./definitions-4b4d3bb7.js";import"./enums-bdecffa2.js";import"./Texture-a719e912.js";import"./color-a0e5bbb3.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-6f559a1a.js";import"./FeatureContainer-d7b2a42e.js";import"./AttributeStoreView-98b68c3a.js";import"./TiledDisplayObject-a64f6237.js";import"./diffUtils-6c9afbf1.js";import"./labelingInfo-23d6e286.js";import"./LabelClass-3d0bd3e4.js";import"./labelUtils-7504045c.js";import"./defaultsJSON-b087dd4d.js";import"./jsonUtils-0dadc667.js";import"./WGLContainer-cfa928c9.js";import"./FramebufferObject-ec3a2f1c.js";import"./ProgramTemplate-6030136e.js";import"./GeometryUtils-656a25af.js";import"./heatmapUtils-eb599eda.js";import"./vec4f64-3c9d0901.js";import"./StyleDefinition-29c49b98.js";import"./config-1337d16e.js";import"./earcut-ac984003.js";import"./featureConversionUtils-3ca44a73.js";import"./OptimizedGeometry-d94e541f.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./visualVariablesUtils-54d3173d.js";import"./ExpandedCIM-649a170a.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./utils-fbfb0ca5.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-e1d75a2b.js";import"./floatRGBA-682b09fa.js";import"./clusterUtils-14e668da.js";import"./MD5-715f37cd.js";import"./SizeVariable-b848ae53.js";import"./colorRamps-89517de6.js";import"./LegendOptions-2334a895.js";import"./util-729b06cc.js";import"./TileContainer-8d4f6d4a.js";import"./vec3f32-2da9db36.js";import"./normalizeUtilsSync-308b076e.js";import"./projectionSupport-387978e5.js";import"./json-48e3ea08.js";import"./Matcher-8da462a7.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-8e719e67.js";import"./LRUCache-65a1a7c7.js";import"./ComputedAttributeStorage-1246f330.js";import"./FieldsIndex-b50dd53d.js";import"./UnknownTimeZone-29b2edce.js";import"./TimeOnly-f8696a66.js";const U=["route-info","direction-line","direction-point","polygon-barrier","polyline-barrier","point-barrier","stop"],o={graphic:null,property:null,oldValue:null,newValue:null};function m(t){return t instanceof y||t instanceof f||t instanceof k||t instanceof M||t instanceof V||t instanceof v||t instanceof G}function $(t){return l.isCollection(t)&&t.length&&m(t.at(0))}function b(t){return Array.isArray(t)&&t.length>0&&m(t[0])}let a=class extends I(F){constructor(){super(...arguments),this._graphics=new l,this._highlightIds=new Map,this._networkFeatureMap=new Map,this._networkGraphicMap=new Map}get _routeItems(){return new u({getCollections:()=>this.layer==null||this.destroyed?[]:[this.layer.routeInfo!=null?new l([this.layer.routeInfo]):null,this.layer.directionLines,this.layer.directionPoints,this.layer.polygonBarriers,this.layer.polylineBarriers,this.layer.pointBarriers,this.layer.stops]})}initialize(){this._updatingHandles.addOnCollectionChange(()=>this._routeItems,t=>this._routeItemsChanged(t),_)}destroy(){var t;this._networkFeatureMap.clear(),this._networkGraphicMap.clear(),this._graphics.removeAll(),(t=this._get("_routeItems"))==null||t.destroy()}attach(){this._createGraphicsView()}detach(){this._destroyGraphicsView()}async fetchPopupFeatures(t){return this._graphicsView.hitTest(t).filter(e=>!!e.popupTemplate)}highlight(t){let e;e=m(t)?[this._getNetworkFeatureUid(t)]:b(t)?t.map(r=>this._getNetworkFeatureUid(r)):$(t)?t.map(r=>this._getNetworkFeatureUid(r)).toArray():[t.uid];const i=e.filter(p);return i.length?(this._addHighlight(i),c(()=>this._removeHighlight(i))):c()}async hitTest(t,e){if(this.suspended)return null;const i=this._graphicsView.hitTest(t).filter(p).map(s=>this._networkGraphicMap.get(s));if(!i.length)return null;const{layer:r}=this;return i.reverse().map(s=>({type:"route",layer:r,mapPoint:t,networkFeature:s}))}isUpdating(){return this._graphicsView.updating}moveStart(){}moveEnd(){}update(t){this._graphicsView.processUpdate(t)}viewChange(){this._graphicsView.viewChange()}_addHighlight(t){for(const e of t)if(this._highlightIds.has(e)){const i=this._highlightIds.get(e);this._highlightIds.set(e,i+1)}else this._highlightIds.set(e,1);this._updateHighlight()}_createGraphic(t){const e=t.toGraphic();return e.layer=this.layer,e.sourceLayer=this.layer,e}_createGraphicsView(){const t=this.view,e=()=>this.requestUpdate(),i=new H(t.featuresTilingScheme);this._graphicsView=new C({container:i,graphics:this._graphics,requestUpdateCallback:e,view:t}),this.container.addChild(i),this._updateHighlight()}_destroyGraphicsView(){this.container.removeChild(this._graphicsView.container),this._graphicsView.destroy()}_getDrawOrder(t){const e=this._networkGraphicMap.get(t);return U.indexOf(e.type)}_getNetworkFeatureUid(t){return this._networkFeatureMap.has(t)?this._networkFeatureMap.get(t).uid:null}_removeHighlight(t){for(const e of t)if(this._highlightIds.has(e)){const i=this._highlightIds.get(e)-1;i===0?this._highlightIds.delete(e):this._highlightIds.set(e,i)}this._updateHighlight()}_routeItemsChanged(t){if(t.removed.length){this._graphics.removeMany(t.removed.map(e=>{const i=this._networkFeatureMap.get(e);return this._networkFeatureMap.delete(e),this._networkGraphicMap.delete(i),i}));for(const e of t.removed)this.removeHandles(e)}if(t.added.length){this._graphics.addMany(t.added.map(e=>{const i=this._createGraphic(e);return i.symbol==null?null:(this._networkFeatureMap.set(e,i),this._networkGraphicMap.set(i,e),i)}).filter(p));for(const e of t.added)this.addHandles([g(()=>e.geometry,(i,r)=>{this._updateGraphic(e,"geometry",i,r)}),g(()=>e.symbol,(i,r)=>{this._updateGraphic(e,"symbol",i,r)})],e);this._graphics.sort((e,i)=>this._getDrawOrder(e)-this._getDrawOrder(i))}}_updateGraphic(t,e,i,r){if(!this._networkFeatureMap.has(t)){const h=this._createGraphic(t);return this._networkFeatureMap.set(t,h),this._networkGraphicMap.set(h,t),void this._graphics.add(h)}const s=this._networkFeatureMap.get(t);s[e]=i,o.graphic=s,o.property=e,o.oldValue=r,o.newValue=i,this._graphicsView.graphicUpdateHandler(o)}_updateHighlight(){const t=Array.from(this._highlightIds.keys());this._graphicsView.setHighlight(t)}};n([d()],a.prototype,"_graphics",void 0),n([d()],a.prototype,"_routeItems",null),a=n([w("esri.views.2d.layers.RouteLayerView2D")],a);const Bt=a;export{Bt as default};
